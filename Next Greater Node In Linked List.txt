/**
 * Definition for singly-linked list.
 * class ListNode(_x: Int = 0, _next: ListNode = null) {
 *   var next: ListNode = _next
 *   var x: Int = _x
 * }
 */
object Solution {
  def findNextLargest(node: ListNode): Int = {
    var currNode = node
    while(currNode != null && currNode.x <= node.x){
      currNode = currNode.next
    }
    if (currNode == null) 0 else currNode.x
  }

  def nextLargerNodes(head: ListNode): Array[Int] = {
    var retAtt:Array[Int] = Array()
    var currNode = head
    while(currNode != null){
      retAtt = retAtt :+ findNextLargest(currNode)
      currNode = currNode.next
    }
    retAtt
  }
}
