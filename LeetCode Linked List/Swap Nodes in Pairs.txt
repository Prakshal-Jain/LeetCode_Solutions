/**
 * Definition for singly-linked list.
 * class ListNode(_x: Int = 0, _next: ListNode = null) {
 *   var next: ListNode = _next
 *   var x: Int = _x
 * }
 */
object Solution {
  def swapSingle(head: ListNode): ListNode ={
    val headNode = head.next
    head.next = headNode.next
    headNode.next = head
    headNode
  }

  def swapPairs(head: ListNode): ListNode = {
    if(head == null || head.next == null){
      head
    }
    else{
      //Swap the first pair --> Make head
      val newHead = swapSingle(head)
      var currNode = newHead.next
      while(currNode.next != null && currNode.next.next != null){
        currNode.next = swapSingle(currNode.next)
        currNode = currNode.next.next
      }
      newHead
    }
  }
}
