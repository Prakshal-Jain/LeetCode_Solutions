/**
 * Definition for singly-linked list.
 * class ListNode(var _x: Int = 0) {
 *   var next: ListNode = null
 *   var x: Int = _x
 * }
 */

object Solution {
  def detectCycle(head: ListNode): ListNode = {
    var lis:List[ListNode] = List()
    var currNode = head
    var isFound = false
    var cycle:ListNode = null
    while(!isFound && currNode != null){
      if(lis.contains(currNode)){
        isFound = true
        cycle = currNode
      }
      else{
        lis = lis :+ currNode
      }
      currNode = currNode.next
    }
    cycle
  }
}
