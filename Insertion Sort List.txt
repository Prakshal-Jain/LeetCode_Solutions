/**
 * Definition for singly-linked list.
 * class ListNode(_x: Int = 0, _next: ListNode = null) {
 *   var next: ListNode = _next
 *   var x: Int = _x
 * }
 */
object Solution {
  def insertionSortList(head: ListNode): ListNode = {
    if(head == null || head.next == null){
      return head
    }
    var currNode = head.next
    var prev = head
    var newHead = head
    while(currNode != null){
      if(prev.x > currNode.x){
        prev.next = currNode.next
        var findPos = newHead
        while(findPos.next != null && findPos.next.x < currNode.x){
          findPos = findPos.next
        }
        if(findPos == newHead && currNode.x < newHead.x){
          currNode.next = newHead
          newHead = currNode
        }
        else{
          val rec = findPos.next
          findPos.next = currNode
          currNode.next = rec
        }
        currNode = prev.next
      }
      else{
        prev = prev.next
        currNode = currNode.next
      }
    }
    newHead
  }
}
