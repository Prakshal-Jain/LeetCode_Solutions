/**
 * Definition for singly-linked list.
 * class ListNode(_x: Int = 0, _next: ListNode = null) {
 *   var next: ListNode = _next
 *   var x: Int = _x
 * }
 */
object Solution {
  def rotateOnce(head: ListNode): ListNode = {
    var currNode = head
    while(currNode.next.next != null){
      currNode = currNode.next
    }
    val newHead = currNode.next
    currNode.next.next = head
    currNode.next = null
    newHead
  }

  def rotateRight(head: ListNode, k: Int): ListNode = {
    if(head == null || head.next == null){
      head
    }
    else {
      var retHead = head
      for (i <- 0 until k) {
        retHead = rotateOnce(retHead)
      }
      retHead
    }
  }
}
