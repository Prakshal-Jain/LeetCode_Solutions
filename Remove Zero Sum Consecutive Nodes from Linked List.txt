/**
 * Definition for singly-linked list.
 * class ListNode(_x: Int = 0, _next: ListNode = null) {
 *   var next: ListNode = _next
 *   var x: Int = _x
 * }
 */
import scala.collection.mutable.ListBuffer
object Solution {
      def findTarget(target: Int, checkList: ListBuffer[ListNode]): (ListBuffer[ListNode], Boolean) = {
    var sum = 0
    var indices = 0
    for(e <- checkList){
      sum += e.x
      if((sum + target) == 0){
        indices += 1
        checkList.remove(0, indices)
        return (checkList, true)
      }
      indices += 1
    }
    (checkList, false)
  }

  def removeElements(head: ListNode, `val`: Int): ListNode = {
    var currNode = head
    var startPoint = head
    if(head != null && head.x == `val`){
      while(currNode != null && currNode.x == `val`){
        currNode = currNode.next
      }
      startPoint = currNode
    }
    while(currNode != null && currNode.next != null){
      if(currNode.next.x == `val`){
        while(currNode.next != null && currNode.next.x == `val`){
          currNode.next = currNode.next.next
        }
      }
      currNode = currNode.next
    }
    startPoint
  }

  def removeZeroSumSublists(head: ListNode): ListNode = {
    var store:ListBuffer[ListNode] = ListBuffer()
    var newHead = removeElements(head, 0)
    var currNode = newHead
    while(currNode != null) {
      val target = currNode.x
      val isFound = findTarget(target, store)
      if (isFound._2) {
        if (isFound._1.nonEmpty) {
          isFound._1.head.next = currNode.next
        }
        else {
          newHead = currNode.next
        }
        store = isFound._1
      }
      else {
        store.insert(0, currNode)
      }
      currNode = currNode.next
    }
    newHead
  }
}
